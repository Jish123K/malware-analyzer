import os

import sys

import time

import datetime

import tkinter as tk

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

from sklearn.model_selection import train_test_split

from sklearn.ensemble import RandomForestClassifier

from sklearn.metrics import classification_report

# This function loads the malware dataset.

def load_malware_dataset():

    # Load the dataset.

    df = pd.read_csv('malware_dataset.csv')

    # Drop the irrelevant columns.

    df.drop(['md5', 'sha1', 'sha256'], axis=1, inplace=True)

    # Convert the labels to binary.

    df['label'] = df['label'].astype('int8')

    return df
    # This function trains the machine learning model.

def train_model():

    # Load the malware dataset.

    df = load_malware_dataset()

    # Split the dataset into training and testing sets.

    X_train, X_test, y_train, y_test = train_test_split(df.drop('label', axis=1), df['label'], test_size=0.25)

    # Create the machine learning model.

    model = RandomForestClassifier(n_estimators=100, random_state=0, oob_score=True, max_depth=16)

    # Train the model.

    model.fit(X_train, y_train)

    # Evaluate the model on the testing set.

    predictions = model.predict(X_test)

    print(classification_report(y_test, predictions))

    return model

# This function detects malware.

def detect_malware(file_path):

    # Load the machine learning model.

    model = train_model()

    # Get the features of the file.

    features = get_features(file_path)

    # Predict the label of the file.

    label = model.predict([features])[0]

    # Return the label.

    return label

# This function gets the features of a file.

def get_features(file_path):

    # Open the file.

    with open(file_path, 'rb') as f:

        content = f.read()
        

    # Get the file size.

    size = os.path.getsize(file_path)

    # Get the file type.

    type = os.path.splitext(file_path)[1][1:]

    # Get the number of unique bytes in the file.

    unique_bytes = len(set(content))

    # Get the entropy of the file.

    entropy = np.random.entropy(content)

    # Get the MD5 hash of the file.

    md5 = hashlib.md5(content).hexdigest()

    # Get the SHA1 hash of the file.

    sha1 = hashlib.sha1(content).hexdigest()

    # Get the SHA256 hash of the file.

    sha256 = hashlib.sha256(content).hexdigest()

    # Create a dictionary of features.

    features = {

        'size': size,

        'type': type,

        'unique_bytes': unique_bytes,

        'entropy': entropy,

        'md5': md5,

        'sha1': sha1,

        'sha256': sha256

    }

    return features

# This function creates the user interface.

def create_ui():

    # Create the main window.

    root = tk.Tk()

    root.title('Malware Detector')
    # This function creates the user interface.

def create_ui():

    # Create the main window.

    root = tk.Tk()

    root.title('Malware Detector')
    # Create the file chooser button.

    btn_file_chooser = tk.Button(root, text='Choose File', command=lambda: on_file_choose(root))

    btn_file_chooser.pack()

    # Create the label for the file name.

    lbl_file_name = tk.Label(root, text='File Name:')

    lbl_file_name.pack()

    # Create the entry for the file name.

    ent_file_name = tk.Entry(root)

    ent_file_name.pack()

    # Create the label for the malware status.

    lbl_malware_status = tk.Label(root, text='Malware Status:')

    lbl_malware_status.pack()

    # Create the label for the malware details.

    lbl_malware_details = tk.Label(root, text='Malware Details:')

    lbl_malware_details.pack()

    # Create the text widget for the malware details.

    txt_malware_details = tk.Text(root, width=30, height=10)

    txt_malware_details.pack()

    # Create the main loop.

    root.mainloop()
    def on_file_choose(root):

    # Get the file name from the user.

    file_name = tk.filedialog.askopenfilename(filetypes=[('Executable Files', '*.exe')])

    # Check if the file is a valid executable file.

    if not file_name.endswith('.exe'):

        tk.messagebox.showerror('Error', 'Please select a valid executable file.')

        return

    # Get the malware status.

    malware_status = detect_malware(file_name)

    # Update the label for the malware status.

    lbl_malware_status.config(text='Malware Status: {}'.format(malware_status))

    # Update the text widget for the malware details.

    txt_malware_details.delete('1.0', tk.END)

    txt_malware_details.insert('1.0', get_malware_details(file_name))

def get_malware_details(file_name):

    # Open the file.

    with open(file_name, 'rb') as f:

        content = f.read()

    # Get the file size.

    size = os.path.getsize(file_name)

    # Get the file type.

    type = os.path.splitext(file_name)[1][1:]

    # Get the number of unique bytes in the file.

    unique_bytes = len(set(content))

    # Get the entropy of the file.

    entropy = np.random.entropy(content)
    # Get the MD5 hash of the file.

    md5 = hashlib.md5(content).hexdigest()

    # Get the SHA1 hash of the file.

    sha1 = hashlib.sha1(content).hexdigest()

    # Get the SHA256 hash of the file.

    sha256 = hashlib.sha256(content).hexdigest()

    # Create a dictionary of malware details.

    malware_details = {

        'size': size,

        'type': type,

        'unique_bytes': unique_bytes,

        'entropy': entropy,

        'md5': md5,

        'sha1': sha1,

        'sha256': sha256

    }

    # Return the dictionary of malware details.

    return malware_details
    
